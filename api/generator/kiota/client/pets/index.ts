/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { serializePet, type Pet } from '../models/';
// @ts-ignore
import { ErrorRequestBuilderRequestsMetadata, type ErrorRequestBuilder } from './errorEscaped/';
// @ts-ignore
import { type WithPetItemRequestBuilder, WithPetItemRequestBuilderNavigationMetadata, WithPetItemRequestBuilderRequestsMetadata } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /pets
 */
export interface PetsRequestBuilder extends BaseRequestBuilder<PetsRequestBuilder> {
    /**
     * The error property
     */
    get errorEscaped(): ErrorRequestBuilder;
    /**
     * Gets an item from the ApiSDK.pets.item collection
     * @param petId Unique identifier of the item
     * @returns {WithPetItemRequestBuilder}
     */
     byPetId(petId: number) : WithPetItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UntypedNode>}
     */
     get(requestConfiguration?: RequestConfiguration<PetsRequestBuilderGetQueryParameters> | undefined) : Promise<UntypedNode | undefined>;
    /**
     * @param body Represent a Pet available in the PetStore
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     post(body: Pet, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PetsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body Represent a Pet available in the PetStore
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Pet, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface PetsRequestBuilderGetQueryParameters {
    skip?: number;
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const PetsRequestBuilderUriTemplate = "{+baseurl}/pets?skip={skip}&top={top}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PetsRequestBuilderNavigationMetadata: Record<Exclude<keyof PetsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPetId: {
        requestsMetadata: WithPetItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithPetItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["petId"],
    },
    errorEscaped: {
        requestsMetadata: ErrorRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PetsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PetsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createUntypedNodeFromDiscriminatorValue,
    },
    post: {
        uriTemplate: PetsRequestBuilderUriTemplate,
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePet,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
